<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wanber - A sortware engineering,backend</title>
    <link>https://wwangbo.github.io/</link>
    <description>Recent content on Wanber - A sortware engineering,backend</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Mar 2018 16:01:23 +0800</lastBuildDate>
    
        <atom:link href="https://wwangbo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://wwangbo.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://wwangbo.github.io/about/</guid>
      
        <description>&lt;p&gt;毕业于湖南大学&lt;/p&gt;
&lt;p&gt;长沙链学小窗科技有限公司联合创始人。&lt;/p&gt;
&lt;p&gt;大学期间实习于华为、CVTE等公司。&lt;/p&gt;
&lt;p&gt;现就职于Grab北京研发中心&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>go语言入门笔记</title>
      <link>https://wwangbo.github.io/post/shortcodes-preview/</link>
      <pubDate>Sun, 04 Mar 2018 16:01:23 +0800</pubDate>
      
      <guid>https://wwangbo.github.io/post/shortcodes-preview/</guid>
      
        <description>&lt;h3 id=&#34;go命令&#34;&gt;go命令&lt;/h3&gt;
&lt;p&gt;go build:用于编译源码文件、代码包、依赖包
go run:可以编译并运行go源码文件
go get:主要是用来动态获取远程代码包&lt;/p&gt;
&lt;h3 id=&#34;go基础&#34;&gt;go基础&lt;/h3&gt;
&lt;p&gt;go一共25保留关键字、36个标识符&lt;/p&gt;
&lt;p&gt;单行注释//
多行注释/*   */&lt;/p&gt;
&lt;p&gt;变量定义type name 类型(int struct interface(前面多个I))
函数 func name(){}
常量 const NAME = &amp;ldquo;imooc&amp;rdquo;
var name = &amp;ldquo;main name&amp;rdquo;
name := &amp;ldquo;wanber&amp;rdquo;&lt;/p&gt;
&lt;p&gt;bool string
(u)int,(u)int8,(u)int16,(u)int32,(u)int64,uintptr(指针)
byte,rune(字符类似int32)
float32,float64,complex64,complex128(复数)&lt;/p&gt;
&lt;h3 id=&#34;package&#34;&gt;package&lt;/h3&gt;
&lt;p&gt;必须声明程序所属包
package main&lt;/p&gt;
&lt;p&gt;package是最基本的分发单位和工程管理中依赖关系的体现
每个GO语言源代码文件开头都拥有一个package声明，表示源码文件所属代码包
要生成GO语言可执行程序，必须要有main的package包，且必须在该包下有main函数
同一个路径下只能存在一个package，一个package可以拆成多个源文件组成&lt;/p&gt;
&lt;p&gt;import语句可以导入源代码文件所依赖的package包
不得导入源代码文件中没有用到的package，否则go编译器会报错
Import语法格式用两种
格式一:
import &amp;ldquo;package1&amp;rdquo;
import &amp;ldquo;package2&amp;rdquo;
格式二:
import(
&amp;ldquo;package1&amp;rdquo;
&amp;ldquo;package2&amp;rdquo;
&amp;ldquo;package3&amp;rdquo;
)&lt;/p&gt;
&lt;p&gt;如果一个main导入其他包，包将被顺序导入
如果导入的包中依赖其它包，会首先导入其它包，然后初始化其它包中的常量和变量，最后如果其它包中有init函数，会自动执行init
所有包在导入完成后才会对main中的中的常量和变量进行初始化，然后执行main中的init函数，最后执行main函数
如果一个包被导入多次，则该包只会被导入一次&lt;/p&gt;
&lt;p&gt;import别名. _
别名操作的含义是：将导入的包命名为另一个容易记忆的名字
点(.)操作的含义是：点(.)标识的包导入后，调用该包中函数时可以省略前缀包名
下划线(&lt;em&gt;)操作的含义是：导入该包，但不导入整个包，而是执行该包中的init函数
因此无法通过包名来调用包中的其他函数。使用下划线(&lt;/em&gt;)操作往往是为了注册包中的引擎，让外部可以方便地使用&lt;/p&gt;
&lt;h3 id=&#34;iota&#34;&gt;iota&lt;/h3&gt;
&lt;p&gt;iota在const关键字出现时被重置为0
const中每新增一行常量声明将使iota计数一次
iota常见使用法:
1）跳值使用法 使用_=iota进行计数
2）插队使用法 中间赋值其他变量
3）表达式隐式使用法
4）单行使用法&lt;/p&gt;
&lt;h3 id=&#34;编写测试程序&#34;&gt;编写测试程序&lt;/h3&gt;
&lt;p&gt;1、源码文件以_test结尾:xxx_test.go
2、测试方法以Test开头:func TestXXX(t *testing.T){&amp;hellip;}
大写的方法代表包外访问，但是测试程序并没有这种含义&lt;/p&gt;
&lt;h3 id=&#34;性能测试benchmark&#34;&gt;性能测试(Benchmark)&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;func BenchmarkConcatStringByAdd(b *testing.B) {

	elems := []string{&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;,&amp;quot;4&amp;quot;,&amp;quot;5&amp;quot;}

	b.ResetTimer()

	for i := 0;i &amp;lt; b.N ;i++  {
		ret := &amp;quot;&amp;quot;
		for _,elem := range elems{
			ret += elem
		}
	}

	b.StopTimer()

}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;按位置0&#34;&gt;按位置0&lt;/h3&gt;
&lt;p&gt;1 &amp;amp;^ 0 &amp;ndash; 1
1 &amp;amp;^ 1 &amp;ndash; 0
0 &amp;amp;^ 1 &amp;ndash; 0
0 &amp;amp;^ 0 &amp;ndash; 0&lt;/p&gt;
&lt;h3 id=&#34;map&#34;&gt;map:&lt;/h3&gt;
&lt;p&gt;func TestInitMap(t *testing.T) {
m1 := map[int]int{1:1,2:4,3:9}
t.Log(m1[2],len(m1))
m2 := map[int]int{}
t.Log(len(m2))
m3 := make(map[int]int,10)
t.Log(len(m3))
}&lt;/p&gt;
&lt;p&gt;func TestAccessNotExistingKey(t *testing.T)  {
m1 := map[int]int{}
t.Log(m1[1])
m1[2] = 0
t.Log(m1[2])
m1[3] = 0
if v,ok:=m1[3];ok {
t.Log(v)
}else {
t.Log(&amp;ldquo;key 3 is not existing&amp;hellip;&amp;quot;)
}
}&lt;/p&gt;
&lt;p&gt;func TestTravelMap(t *testing.T) {
m1 := map[int]int{1:1,2:4,3:9}
for k,v := range m1{
t.Log(k,v)
}
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;m := map[int]func(op int)int{}
m[1] = func(op int) int {return op}
m[2] = func(op int) int {return op * op}
m[3] = func(op int) int {return op * op * op}
t.Log(m[1](2),m[2](2),m[3](2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;go里面没有set实现，可以基于map实现set,map[type]bool
func TestMapForSet(t *testing.T)  {
mySet := map[int]bool{}
mySet[1] = true
n := 1
if mySet[n] {
t.Logf(&amp;quot;%d is existing&amp;rdquo;,n)
}else {
t.Logf(&amp;quot;%d is not existing&amp;rdquo;,n)
}
}&lt;/p&gt;
&lt;h3 id=&#34;异常处理&#34;&gt;异常处理&lt;/h3&gt;
&lt;p&gt;defer函数（类似trycache的finally）&lt;/p&gt;
&lt;p&gt;内置单元测试框架
Fail,Error:该测试失败，该测试继续，其他测试继续执行
FailNow,Fatal：该测试失败，该测试中止，其他测试继续进行&lt;/p&gt;
&lt;h3 id=&#34;代码覆盖率&#34;&gt;代码覆盖率&lt;/h3&gt;
&lt;p&gt;go test -v - cover
断言：https://github.com/stretchr/testify&lt;/p&gt;
&lt;h3 id=&#34;反射&#34;&gt;反射&lt;/h3&gt;
&lt;p&gt;reflect.TypeOf返回类型(reflect.Type)
reflect.ValueOf返回值（reflect.Value）
可以从reflect.Value获得类型(.type函数)
通过kind来判断类型&lt;/p&gt;
&lt;p&gt;利用反射编写灵活的代码&lt;/p&gt;
&lt;p&gt;按名字访问结构的成员reflect.ValueOf(*e).FieldByName(&amp;ldquo;Name&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;按名字访问结构的方法reflect.ValueOf(e).MethodByName(&amp;ldquo;UpdateAge&amp;rdquo;).Call([]reflect.Value{reflect.ValueOf}f(1))&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Employee struct {
	EmployeeID string
	Name string `format:&amp;quot;normal&amp;quot;`
	Age int
}

func (e *Employee) UpdateAge(newVal int){
	e.Age = newVal
}

func TestInvokeByName(t *testing.T)  {
	e := &amp;amp;Employee{&amp;quot;1&amp;quot;,&amp;quot;Mike&amp;quot;,30}
	t.Logf(&amp;quot;Name:value(%[1]v),Type(%[1]T)&amp;quot;,reflect.ValueOf(*e).FieldByName(&amp;quot;Name&amp;quot;))
	if nameField,ok := reflect.TypeOf(*e).FieldByName(&amp;quot;Name&amp;quot;);ok {
		t.Log(&amp;quot;Tag:format&amp;quot;,nameField.Tag.Get(&amp;quot;format&amp;quot;))
	}else {
		t.Error(&amp;quot;Failed to get &#39;Name&#39; field.&amp;quot;)
	}
}
&lt;/code&gt;&lt;/pre&gt;</description>
      
    </item>
    
  </channel>
</rss>
